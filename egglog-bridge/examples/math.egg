; an egglog program equivalent to the math benchmark.
; this is a minor change compared to the microbenchmark used in the egglog paper.

(datatype Math
    (Diff Math Math)
    (Integral Math Math)
    
    (Add Math Math)
    (Sub Math Math)
    (Mul Math Math)
    (Div Math Math)
    (Pow Math Math)
    (Ln Math)
    (Sqrt Math)
    
    (Sin Math)
    (Cos Math)
    
    (Const Rational)
    (Var String))

(Integral (Ln (Var "x")) (Var "x"))
(Integral (Add (Var "x") (Cos (Var "x"))) (Var "x"))
(Integral (Mul (Cos (Var "x")) (Var "x")) (Var "x"))
(Diff (Var "x") (Add (Const (rational 1 1)) (Mul (Const (rational 2 1)) (Var "x"))))
(Diff (Var "x") (Sub (Pow (Var "x") (Const (rational 3 1))) (Mul (Const (rational 7 1)) (Pow (Var "x") (Const (rational 2 1))))))
(Add (Mul (Var "y") (Add (Var "x") (Var "y"))) (Sub (Add (Var "x") (Const (rational 2 1))) (Add (Var "x") (Var "x"))))
(Div (Const (rational 1 1))
                        (Sub (Div (Add (Const (rational 1 1))
                                    (Sqrt (Var "five")))
                                (Const (rational 2 1)))
                            (Div (Sub (Const (rational 1 1))
                                    (Sqrt (Var "five")))
                                (Const (rational 2 1)))))              

(run 5)

; (rewrite (Add a b) (Add b a))
(rule ((= e (Add a b))) ((set (Add b a) e)))
; (rewrite (Mul a b) (Mul b a))
(rule ((= e (Mul a b))) ((set (Mul b a) e)))
; (rewrite (Add a (Add b c)) (Add (Add a b) c))
(rule ((= e (Add a (Add b c)))) ((set (Add (Add a b) c) e)))
; (rewrite (Mul a (Mul b c)) (Mul (Mul a b) c))
(rule ((= e (Mul a (Mul b c)))) ((set (Mul (Mul a b) c) e)))


; (rewrite (Sub a b) (Add a (Mul (Const (rational -1 1)) b)))
(rule ((= e (Sub a b))) ((set (Add a (Mul (Const (rational -1 1)) b)) e)))

; commented out in the paper eval too
;; (rewrite (Div a b) (Mul a (Pow b (Const (rational -1 1)))) :when ((is-not-zero b)))

(rewrite (Add a (Const (rational 0 1))) a)
; (rewrite (Mul a (Const (rational 0 1))) (Const (rational 0 1)))
(rule ((= e (Mul a (Const (rational 0 1))))) ((set (Const (rational 0 1)) e)))
(rewrite (Mul a (Const (rational 1 1))) a)

; (rewrite (Sub a a) (Const (rational 0 1)))
(rule ((= e (Sub a a))) ((set (Const (rational 0 1)) e)))

; (rewrite (Mul a (Add b c)) (Add (Mul a b) (Mul a c)))
(rule ((= e (Mul a (Add b c)))) ((set (Add (Mul a b) (Mul a c)) e)))
; (rewrite (Add (Mul a b) (Mul a c)) (Mul a (Add b c)))
(rule ((= e (Add (Mul a b) (Mul a c)))) ((set (Mul a (Add b c)) e)))

; (rewrite (Mul (Pow a b) (Pow a c)) (Pow a (Add b c)))
(rule ((= e (Mul (Pow a b) (Pow a c)))) ((set (Pow a (Add b c)) e)))
(rewrite (Pow x (Const (rational 1 1))) x)
; (rewrite (Pow x (Const (rational 2 1))) (Mul x x))
(rule ((= e (Pow x (Const (rational 2 1))))) ((set (Mul x x) e)))

; (rewrite (Diff x (Add a b)) (Add (Diff x a) (Diff x b)))
(rule ((= e (Diff x (Add a b)))) ((set (Add (Diff x a) (Diff x b)) e)))
; (rewrite (Diff x (Mul a b)) (Add (Mul a (Diff x b)) (Mul b (Diff x a))))
(rule ((= e (Diff x (Mul a b)))) ((set (Add (Mul a (Diff x b)) (Mul b (Diff x a))) e)))

; (rewrite (Diff x (Sin x)) (Cos x))
(rule ((= e (Diff x (Sin x)))) ((set (Cos x) e)))
; (rewrite (Diff x (Cos x)) (Mul (Const (rational -1 1)) (Sin x)))
(rule ((= e (Diff x (Cos x)))) ((set (Mul (Const (rational -1 1)) (Sin x)) e)))

(rewrite (Integral (Const (rational 1 1)) x) x)
; (rewrite (Integral (Cos x) x) (Sin x))
(rule ((= e (Integral (Cos x) x))) ((set (Sin x) e)))
; (rewrite (Integral (Sin x) x) (Mul (Const (rational -1 1)) (Cos x)))
(rule ((= e (Integral (Sin x) x))) ((set (Mul (Const (rational -1 1)) (Cos x)) e)))
; (rewrite (Integral (Add f g) x) (Add (Integral f x) (Integral g x)))
(rule ((= e (Integral (Add f g) x))) ((set (Add (Integral f x) (Integral g x)) e)))
; (rewrite (Integral (Sub f g) x) (Sub (Integral f x) (Integral g x)))
(rule ((= e (Integral (Sub f g) x))) ((set (Sub (Integral f x) (Integral g x)) e)))
; (rewrite (Integral (Mul a b) x) 
;     (Sub (Mul a (Integral b x)) 
;          (Integral (Mul (Diff x a) (Integral b x)) x)))
(rule ((= e (Integral (Mul a b) x)))
    ((set (Sub (Mul a (Integral b x)) 
               (Integral (Mul (Diff x a) (Integral b x)) x)) 
           e)))
(run 12)
(print-size Diff)
(print-size Integral)
(print-size Add)
(print-size Sub)
(print-size Mul)
(print-size Div)
(print-size Pow)
(print-size Ln)
(print-size Sqrt)
(print-size Sin)
(print-size Cos)
(print-size Const)
(print-size Var)