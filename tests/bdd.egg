; Binary Decision Diagrams are if-then-else trees/ compressed tries that hash cons their leaves
; This is easily expressible in the facilities provided. Everything in egglog is automatcally shared
; and Compression is easily expressible as a rule.

; They are a notion of first class set useful for certain classes of uniformly describable sets.
; https://en.wikipedia.org/wiki/Binary_decision_diagram
; https://www.lri.fr/~filliatr/ftp/publis/hash-consing2.pdf Type-Safe Modular Hash-Consing - Section 3.3

(datatype BDD
    (ITE i64 BDD BDD) ; variables labelled by number
)
(declare True BDD)
(declare False BDD)

; compress unneeded nodes
(rewrite (ITE n a a) a)

(function and (BDD BDD) BDD)
(rewrite (and x y) (and y x))
(rewrite (and False n) False)
(rewrite (and True x) x)

; We use an order where low variables are higher in tree
; Could go the other way.
(rewrite (and (ITE n a1 a2) (ITE m b1 b2))
    (ITE n (and a1 (ITE m b1 b2)) (and a2 (ITE m b1 b2)))
    :when ((< n m))
)
(rewrite (and (ITE n a1 a2) (ITE n b1 b2))
    (ITE n (and a1 b1) (and a2 b2))
)

(function or (BDD BDD) BDD)
(rewrite (or x y) (or y x))
(rewrite (or True n) True)
(rewrite (or False x) x)
(rewrite (or (ITE n a1 a2) (ITE m b1 b2))
    (ITE n (or a1 (ITE m b1 b2)) (or a2 (ITE m b1 b2)))
    :when ((< n m))
)
(rewrite (or (ITE n a1 a2) (ITE n b1 b2))
    (ITE n (or a1 b1) (or a2 b2))
)

(function not (BDD) BDD)
(rewrite (not True) False)
(rewrite (not False) True)
(rewrite (not (ITE n a1 a2)) (ITE n (not a1) (not a2)))


(function xor (BDD BDD) BDD)
(rewrite (xor x y) (xor y x))
(rewrite (xor True n) (not n))
(rewrite (xor False x) x)

(rewrite (xor (ITE n a1 a2) (ITE m b1 b2))
    (ITE n (xor a1 (ITE m b1 b2)) (xor a2 (ITE m b1 b2)))
    :when ((< n m))
)
(rewrite (xor (ITE n a1 a2) (ITE n b1 b2))
    (ITE n (xor a1 b1) (xor a2 b2))
)

(push)
;;; Tests

(let v0 (ITE 0 True False))
(let v1 (ITE 1 True False))
(let v2 (ITE 2 True False))

(let t0 (not (not v0)))
(let t1 (or v0 (not v0)))
(let t2 (and v0 (not v0)))
(let t3 (and v0 v0))
(let t4 (or v0 v0))
(let t5 (xor (not v0) v0))
(let t6 (and (or v1 v2) v2))

(let t7a (xor (not v0) v1))
(let t7b (xor v0 (not v1)))
(let t7c (not (xor v0 v1)))

(let t8 (and v1 v2))

(let t9 (and (not v1) (and (not v0) (xor v0 v1))))
(let t10 (or (not v1) (or (not v0) (xor  v0 (not v1)))))

(run 30)

(check (= t0 v0)) ; not cancels
(check (= t1 True))
(check (= t2 False))
(check (= t3 v0))
(check (= t4 v0))
(check (= t5 True))
(check (= t6 v2))

(check (= t7a t7b))
(check (= t7a t7c))

(check (= t8 (ITE 1 (ITE 2 True False) False)))

(check (= t9 False))
(check (= t10 True))
(pop)
