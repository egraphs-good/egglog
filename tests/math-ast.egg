(datatype Math
  (Num i64)
  (Var String)
  (Add Math Math)
  (Sub Math Math)
  (Mul Math Math)
  (Div Math Math)
  (Pow Math Math)
)

(rewrite (Add x y) (Add y x))
(rewrite (Add (Add x y) z) (Add x (Add y z)))
(rewrite (Add (Num x) (Num y)) (Num (+ x y)))
(rewrite (Add x (Num 0)) x)

(rewrite (Sub (Num x) (Num y)) (Num (- x y)))
(rewrite (Sub x y) (Add x (Mul (Num -1) y)))
(rewrite (Sub x x) (Num 0))

(rewrite (Mul x y) (Mul y x))
(rewrite (Mul (Mul x y) z) (Mul x (Mul y z)))
(rewrite (Mul (Num x) (Num y)) (Num (* x y)))
(rewrite (Mul x (Num 0)) (Num 0))
(rewrite (Mul x (Num 1)) x)

;; little bit of a hack, can't quantify over Math yet
(rewrite (Var x) (Mul (Num 1) (Var x))) 

;; distribute and factor
(rewrite (Mul a (Add b c)) (Add (Mul a b) (Mul a c)))
(rewrite (Add (Mul a b) (Mul a c)) (Mul a (Add b c)))


(define a1 (Add (Var "x") (Add (Var "x") (Add (Var "x") (Var "x")))))
(define a2 (Mul (Var "x") (Num 4)))
(run 5)
(check (= a1 a2))
(clear)

(define a1 (Add (Num 1)
                (Sub (Var "a")
                     (Mul (Sub (Num 2) (Num 1))
                          (Var "a")))))
(define a2 (Num 1))
(run 5)
(check (= a1 a2))
(clear)


