(datatype Expr
    (If Expr Expr Expr)
    (Lt Expr Expr)
    (Var String i64)
    (Abs Expr)
    (Neg Expr)
    (Num i64))

(datatype ExprModuloCtx (StripCtx Expr))
(rule ((= e1 (Var x i1)) 
       (= e2 (Var x i2)))
      ((union (StripCtx e1) (StripCtx e2))))
(rule (
    (= e1 (If c1 thn1 els1))
    (= e2 (If c2 thn2 els2))
    (= (StripCtx c1) (StripCtx c2))
    (= (StripCtx thn1) (StripCtx thn2))
    (= (StripCtx els1) (StripCtx els2))
)(
    (union (StripCtx e1) (StripCtx e2))
))
(rule (
    (= e1 (Lt le1 re1))
    (= e2 (Lt le2 re2))
    (= (StripCtx le1) (StripCtx le2))
    (= (StripCtx re1) (StripCtx re2))
)(
    (union (StripCtx e1) (StripCtx e2))
))
(rule (
    (= e1 (Abs inner1))
    (= e2 (Abs inner2))
    (= (StripCtx inner1) (StripCtx inner2))
)(
    (union (StripCtx e1) (StripCtx e2))
))
(rule (
    (= e1 (Neg inner1))
    (= e2 (Neg inner2))
    (= (StripCtx inner1) (StripCtx inner2))
)(
    (union (StripCtx e1) (StripCtx e2))
))

(define program
    (If (Lt (Var "x" 1) (Num 0))
        (Abs (Var "x" 2))
        (Neg (Abs (Var "x" 3))))
    :cost 1000)

(function hi-var (Expr String) i64 :merge (min old new))
(function lo-var (Expr String) i64 :merge (max old new))

(function hi (Expr) i64 :merge (min old new))
(function lo (Expr) i64 :merge (max old new))

(rule ((= e (If (Lt (Var x ident) (Num upper-bound)) thn els)))
      ((set (hi-var thn x) upper-bound)
       (set (lo-var els x) upper-bound)))

;; Propogate up and down for abs
(rule ((= e (Abs e1))
       (= (hi-var e1 x) h))
      ((set (hi-var e x) h)))
(rule ((= e (Abs e1))
       (= (hi-var e x) h))
      ((set (hi-var e1 x) h)))
(rule ((= e (Abs e1))
       (= (lo-var e1 x) h))
      ((set (lo-var e x) h)))
(rule ((= e (Abs e1))
       (= (lo-var e x) h))
      ((set (lo-var e1 x) h)))

;; Propogate up and down for neg
(rule ((= e (Neg e1))
       (= (hi-var e1 x) h))
      ((set (hi-var e x) h)))
(rule ((= e (Neg e1))
       (= (hi-var e x) h))
      ((set (hi-var e1 x) h)))
(rule ((= e (Neg e1))
       (= (lo-var e1 x) h))
      ((set (lo-var e x) h)))
(rule ((= e (Neg e1))
       (= (lo-var e x) h))
      ((set (lo-var e1 x) h)))

(rule ((= (hi-var e x) h)
       (= e (Abs (Var v ident)))
       (<= h 0))
      ((union e (Neg (Var v ident)))))
(rule ((= (lo-var e x) h)
       (= e (Abs (Var v ident)))
       (>= h 0))
      ((union e (Var v ident))))

(rewrite (If c e1 e2) e)

(run 10)

(extract program)