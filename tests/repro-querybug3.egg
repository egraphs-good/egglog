(datatype Var)
(datatype Term)
(function App (Term Term) Term)
(function Lam (Var Term) Term)
(function Var (Var) Term)
(function Let (Var Term Term) Term)
(function Add (Term Term) Term)
(function Num (i64) Term)
(function CaseSplit (Term Term Term) Term)
(function Cons (Term Term) Term)
(function Nil () Term)
(function V (String) Var)
(sort StringSet (Map Var i64))
(function freer (Term) StringSet :merge (set-intersect old new))

;;(rule ((= e (App e1 e2))
;;       (= (freer e1) fv1)
;;       (= (freer e2) fv2))
;;      ((set (freer e) (set-union fv1 fv2))))

(rule ((= e (App e1 e2))
       (= fvar1__ (freer e1))
       (= fvar1__ fv1)
       (= fvar2__ (freer e2))
       (= fvar2__ fv2))
     ((set (freer e) (set-union fv1 fv2))))
(rule ((= e (Var v))) ((set (freer e) (insert (empty) v 1))))
(function sum () Term :cost 1000)
(union sum (Lam (V "xs") (CaseSplit (Var (V "xs")) (Num 0) (Lam (V "x") (Lam (V "xs'") (Add (Var (V "x")) (App sum (Var (V "xs'")))))))))
(set (freer (sum)) (empty))
(run 100)
