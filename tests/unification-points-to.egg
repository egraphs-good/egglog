(datatype Func (Func String))
(datatype Stmt (Stmt String))
(datatype Expr (Expr String))
(datatype Field (Field String))
(datatype Type (Type String))
(datatype Var (Var String))

(relation func (Func Var Type Type))
(relation func-stmt (Func Stmt))
(relation assign (Stmt Type Var Expr))
(relation field-assign (Stmt Var Field Expr))
(relation store (Stmt Var Expr))
(relation expr (Stmt Expr))
(relation return (Stmt Expr))
(relation eq (Expr Expr Expr))
(relation call (Expr Func Expr))
(relation add (Expr Expr Expr))
(relation field (Expr Expr Field))
(relation struct-lit-field (Expr Field Expr))
(relation addr (Expr Var Field))
(relation load (Expr Var))
(relation malloc (Expr Type))

;; typedef struct s {
;;   int x;
;;   int y;
;; } s;

;; int mul(struct s q) { ... }

;; int fact(int i) {
;;   int c = i == 0;
;;   if (c) {
;;     return 1;
;;   } else {
;;     int j = i + -1;
;;     int r = fact(j);
;;     int prod = mul((struct s){i, r});
;;     return prod;
;;   }
;; }
(func (Func "fact") (Var "i") (Type "int") (Type "int"))
(func-stmt (Func "fact") (Stmt "int c = i == 0;"))
(func-stmt (Func "fact") (Stmt "if ..."))
(func-stmt (Func "fact") (Stmt "return 1"))
(func-stmt (Func "fact") (Stmt "int j = i + -1"))
(func-stmt (Func "fact") (Stmt "int r = fact(j)"))
(func-stmt (Func "fact") (Stmt "int prod = mul({ x: i, y: r })"))
(func-stmt (Func "fact") (Stmt "return prod"))
(assign (Stmt "int c = i == 0") (Type "int") (Var "c") (Expr "i == 0"))
(assign (Stmt "int j = i + -1") (Type "int") (Var "j") (Expr "i + -1"))
(assign (Stmt "int r = fact(j)") (Type "int") (Var "r") (Expr "fact(j)"))
(assign (Stmt "int prod = mul({ x: i, y: r })") (Type "int") (Var "prod") (Expr "mul({ x: i, y: r })"))
(eq (Expr "i == 0") (Expr "i") (Expr "0"))
(add (Expr "i + -1") (Expr "i") (Expr "-1"))
(call (Expr "fact(j)") (Func "fact") (Expr "j"))
(call (Expr "mul({ x: i, y: r })") (Func "mul") (Expr "{ x: i, y: r }"))
(return (Stmt "return prod") (Expr "prod"))

;; typedef struct s {
;;   int *x;
;;   int *y;
;; } s;

;; void swap(struct s *r) {
;;   int **xp = &(r->x);
;;   int **yp = &(r->y);
;;   int *a = *xp;
;;   int *b = *yp;
;;   *xp = a;
;;   *yp = b;
;; }

;; int f(int i) {
;;   struct s *sp = malloc(sizeof(struct s));
;;   int *u = malloc(sizeof(int));
;;   int *v = malloc(sizeof(int));
;;   *u = i;
;;   *v = i;
;;   *sp = (struct s){u, v};
;;   swap(sp);
;;   int **zpp = &(sp->x);
;;   int *zp = *zpp;
;;   return *zp;
;; }
(func (Func "swap") (Var "r") (Type "void") (Type "{int *x; int *y;}*"))
;; statements
(func-stmt (Func "swap") (Stmt "int **xp = &(r->x)"))
(func-stmt (Func "swap") (Stmt "int **yp = &(r->y)"))
(func-stmt (Func "swap") (Stmt "int *z = *xp"))
(func-stmt (Func "swap") (Stmt "int *w = *yp"))
(func-stmt (Func "swap") (Stmt "*xp = a"))
(func-stmt (Func "swap") (Stmt "*yp = b"))
(assign (Stmt "int **xp = &(r->x)") (Type "int **") (Var "xp") (Expr "&(r->x)"))
(assign (Stmt "int **yp = &(r->x)") (Type "int **") (Var "yp") (Expr "&(r->y)"))
(assign (Stmt "int *a = *xp") (Type "int *") (Var "a") (Expr "*xp"))
(assign (Stmt "int *b = *yp") (Type "int *") (Var "b") (Expr "*yp"))
(store (Stmt "*xp = a") (Var "xp") (Expr "a"))
(store (Stmt "*yp = b") (Var "yp") (Expr "b"))
;; expressions
(addr (Expr "&(r->x)") (Var "r") (Field "x"))
(addr (Expr "&(r->y)") (Var "r") (Field "y"))
(load (Expr "*xp") (Var "xp"))
(load (Expr "*yp") (Var "yp"))

(func (Func "f") (Var "i") (Type "int") (Type "int"))
;; statements
(func-stmt (Func "f") (Stmt "struct s *sp = malloc(sizeof(struct s))"))
(func-stmt (Func "f") (Stmt "int *u = malloc(sizeof(int))"))
(func-stmt (Func "f") (Stmt "int *v = malloc(sizeof(int))"))
(func-stmt (Func "f") (Stmt "*u = i"))
(func-stmt (Func "f") (Stmt "*v = i"))
(func-stmt (Func "f") (Stmt "*sp = (struct s){u, v}"))
(func-stmt (Func "f") (Stmt "swap(sp)"))
(func-stmt (Func "f") (Stmt "int **zpp = &(sp->x)"))
(func-stmt (Func "f") (Stmt "int *zp = *zpp"))
(func-stmt (Func "f") (Stmt "return *zp"))
(assign (Stmt "struct s *sp = malloc(sizeof(struct s))") (Type "struct s*") (Var "sp") (Expr "malloc(sizeof(struct s))"))
(assign (Stmt "int *u = malloc(sizeof(int))") (Type "int *") (Var "u") (Expr "malloc(sizeof(int))"))
(assign (Stmt "int *v = malloc(sizeof(int))") (Type "int *") (Var "v") (Expr "malloc(sizeof(int))"))
(store (Stmt "*u = i") (Var "u") (Expr "i"))
(store (Stmt "*v = i") (Var "v") (Expr "i"))
(store (Stmt "*sp = (struct s){u, v}") (Var "sp") (Expr "(struct s){u, v}"))
(expr (Stmt "swap(sp)") (Expr "swap(sp)"))
(assign (Stmt "int **zpp = &(sp->x)") (Type "int **") (Var "zpp") (Expr "&(sp->x)"))
(assign (Stmt "int *zp = *zpp") (Type "int *") (Var "zp") (Expr "*zpp"))
(return (Stmt "return *zp") (Expr "*zp"))
;; expressions
(malloc (Expr "malloc(sizeof(struct s))") (Type "struct s"))
(malloc (Expr "malloc(sizeof(int))") (Type "int"))
(struct-lit-field (Expr "(struct s){u, v}") (Field "x") (Expr "u"))
(struct-lit-field (Expr "(struct s){u, v}") (Field "y") (Expr "v"))
(call (Expr "swap(sp)") (Func "swap") (Expr "sp"))
(addr (Expr "&(sp->x)") (Var "sp") (Field "x"))
(load (Expr "*zpp") (Var "zpp"))
(load (Expr "*zp") (Var "zp"))
