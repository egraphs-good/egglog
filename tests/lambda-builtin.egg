; Tests for the builtin lambda function
(datatype Math
  (Num i64)
  (Var String)
  (Add Math Math)
  (Mul Math Math))


(rewrite (Mul (Num x) (Num y)) (Num (* x y)))
; (rewrite (Mul x y) (Mul y x))

; We define a function from math -> Math
(sort MathFn (Lambda Math Math))

; Test a function that doesn't use its args
(push)
(define one-thunk (lambda (var "x") (Num 1)))
(define one (apply one-thunk (Var "doesnt matter")))
(check (= one (Num 1)))
(pop)

; Test a function which doubles its arguments
(define double (lambda (var "x") (Mul (var "x") (Num 2))))

(push)
(define two (apply double (Num 1)))
(run 1)
(check (= two (Num 2)))
(define four (apply double two))
(run 1)
(check (= four (Num 4)))
(pop)



; Test apply the double function to a vec

(sort MathVec (Vec Math))
(define vec (vec-of (Num 1) (Num 2) (Var "3")))
(define doubled-vec (vec-map vec double))
(run 1)
(check (= doubled-vec (vec-of (Num 2) (Num 4) (Mul (Var "3") (Num 2)))))
