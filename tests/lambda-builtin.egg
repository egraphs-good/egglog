(datatype Math
  (Num i64)
  (Var String)
  (Add Math Math)
  (Mul Math Math))


(rewrite (Mul (Num x) (Num y)) (Num (* x y)))

(sort MathFn (Lambda Math Math))

(define one-thunk (lambda (var "x") (Num 1)))

(define one (apply one-thunk (Var "doesnt matter")))

(run 10)
(check (= one (Num 1)))

(define double (lambda (var "y") (Mul (var "y") (Num 2))))
(run 10)
(Num 1)
(apply double (Num 1))
(define two (apply double (Num 1)))
(run 10)

(check (= two (Num 2)))

(define four (apply double two))
(run 10)

(check (= four (Num 4)))

; Vec tests

(sort MathVec (Vec Math))
(define my-vec (vec-of (Num 1)  (Var "3")))

(define doubled-vec (vec-map my-vec double))

(run 20)
(check (= doubled-vec (vec-of (Num 2) (Mul (Var "3") (Num 2)))))
