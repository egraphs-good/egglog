(datatype Math
    (Add Math Math)
    (Sub Math Math)
    (Const Rational)
    (Var String))

(datatype AstMath
  (AstAdd AstMath AstMath)
  (AstSub AstMath AstMath)
  (AstConst Rational)
  (AstVar String))

(datatype ProofList)

;; There are two types of proofs:
;; 1) Provenance proofs justify the existance of a term 
;; 2) Equality proofs prove two terms are equal 
;; Equality proofs `a = b` also double as
;; provenance proofs `a` and `b`
;; When a proof `a = b` is used as a provenance proof, it is a proof of `b`
(datatype Proof
  ;; proves that a term exists in the database
  (Original AstMath)
  ;; justifies the fact that a rule fired
  ;; the proof list justifies each of the premises in order
  ;; it then justifies all of the equality constraints in order
  (Rule ProofList String)
  ;; using a rule justification,
  ;; proves a term exists
  (RuleTerm Proof AstMath)
  ;; using a rule justification, proves two terms are equal
  (RuleEquality Proof AstMath AstMath)

  ;; given proofs for x1 = x2, x2 = x3, ..., xn = xn+1
  ;; proves that x1 = xn+1 and x1 and xn+1 exist
  (Transitivity ProofList)
  ;; given x1 = x2, proves x2 = x1
  (Flip Proof)
  ;; given a proof for a term t1, proves that t1 is equal
  ;; to another term t2 via equality proofs on their children
  (Congruence Proof ProofList)
  ;; a placeholder for a proof of equality between two
  ;; terms which can be proven equal using the graph
  ;; stored in the `Eq` relation
  (DemandEq AstMath AstMath :cost 10000000))

;; ProofList definitions
(function Cons (Proof ProofList) ProofList)
(function Null () ProofList)

;; prove two terms equal
(function EqGraph (AstMath AstMath) Proof  :cost 100000 :merge old)

(datatype TrmPrf
  (MakeTrmPrf AstMath Proof))

;; get child terms, proofs, and child terms
(function TrmOf (TrmPrf) AstMath :cost 10000)
(function PrfOf (TrmPrf) Proof :cost 100000)
(function Child1 (AstMath) AstMath :cost 100000)
(function Child2 (AstMath) AstMath :cost 100000)


;; For every Add in the database,
;; store an AstAdd representative
;; and a proof of that representative
(function AddRep (Math Math) TrmPrf
  :on_merge (
  (let t1 (TrmOf old))
  (let t2 (TrmOf new))
  (let p1 (PrfOf old))
  (let x1 (Child1 t1))
  (let y1 (Child2 t1))
  (let x2 (Child1 t2))
  (let y2 (Child2 t2))
  (let cong-prf
    (Congruence p1
      (Cons (DemandEq x1 x2)
        (Cons (DemandEq y1 y2)
          Null))))
  (set (EqGraph t1 t2) cong-prf)
  (set (EqGraph t2 t1) (Flip cong-prf))
)
  :merge old)

(function SubRep (Math Math) TrmPrf
  :on_merge (
  (let t1 (TrmOf old))
  (let t2 (TrmOf new))
  (let p1 (PrfOf old))
  (let x1 (Child1 t1))
  (let y1 (Child2 t1))
  (let x2 (Child1 t2))
  (let y2 (Child2 t2))
  (let cong-prf
    (Congruence p1
      (Cons (DemandEq x1 x2)
        (Cons (DemandEq y1 y2)
          Null))))
  (set (EqGraph t1 t2) cong-prf)
  (set (EqGraph t2 t1) (Flip cong-prf))
) :merge old)
(function ConstRep (Rational) TrmPrf :merge old)
(function VarRep (String) TrmPrf :merge old)


;; ############################## NORMAL RULES

(rule ((= t (Add a b))
       (= tp (AddRep a b))
       (= term (TrmOf tp))
       (= proof (PrfOf tp)))
      ((union (Add a b) (Add (Add a b) (Const (rational 0 1))))
       (let rhs (AstAdd term (AstConst (rational 0 1))))
       (let ruleprf (Rule (Cons proof
                            (Null))
                          "add-identity"))
       (let trmprf (MakeTrmPrf rhs (RuleTerm ruleprf rhs)))
       (set (AddRep (Add a b) (Const (rational 0 1)))
            trmprf)
       (set (TrmOf trmprf) rhs)
       (set (PrfOf trmprf) (RuleTerm ruleprf rhs))
        
       (set (EqGraph term rhs)
           (RuleEquality ruleprf term rhs))
       (set (EqGraph rhs term)
           (Flip (RuleEquality ruleprf term rhs)))))

(rule ((= t (Add a b)) ;; (rewrite (Add a b) (Add b c))
       (= tp (AddRep a b))
       (= lhs (TrmOf tp))
       (= proof (PrfOf tp))
       (= c1 (Child1 lhs))
       (= c2 (Child2 lhs)))
      ((union (Add a b) (Add b a)) ;; normal rhs
       (let ruleprf (Rule (Cons proof
                                (Null))
                          "add-commute"))
       (let rhs (AstAdd c2 c1))
       (let trmprf (MakeTrmPrf rhs (RuleTerm ruleprf rhs)))
       (set (AddRep b a)
            trmprf)
       (set (TrmOf trmprf) rhs)
       (set (PrfOf trmprf) (RuleTerm ruleprf rhs))

       (set (EqGraph lhs rhs) ;; equality edge ->
           (RuleEquality ruleprf lhs rhs))
       (set (EqGraph rhs lhs) ;; equality edge ->
           (Flip (RuleEquality ruleprf lhs rhs)))))

; (rewrite (Add a (Add b c)) (Add (Add a b) c))
(rule ((= t (Add a (Add b c)))
       (= tp (AddRep a (Add b c)))
       (= term (TrmOf tp))
       (= proof (PrfOf tp))
       (= c1 (Child1 term))
       (= c2 (Child2 term))
       (= tp2 (AddRep b c))
       (= c2term (TrmOf tp2))
       (= proof-right (PrfOf tp2))
       (= c2termc1 (Child1 c2term))
       (= c2termc2 (Child2 c2term)))
      ((union (Add a (Add b c)) (Add (Add a b) c))
       (let newrep (AstAdd c1 c2term))
       (let newrepproof
         (Congruence
             proof
             (Cons 
                (DemandEq c1 c1)
                (Cons
                  (DemandEq c2 c2term)
                    (Null)))))
       (let ruleproof
         (Rule 
          (Cons
            newrepproof
            (Null))
          "add-assoc"))
       ;; first, add our new representative to the graph via congruence
       (set (EqGraph term newrep) newrepproof)
       (set (EqGraph newrep term) newrepproof)
       (let rhs (AstAdd (AstAdd c1 c2termc1)
                       c2termc2))
       (let trmprf
            (MakeTrmPrf rhs (RuleTerm ruleproof rhs)))
       ;; Add a proof for our RHS
       (set (AddRep (Add a b) c)
            trmprf)
       (set (TrmOf trmprf) rhs)
       (set (PrfOf trmprf) (RuleTerm ruleproof rhs))

       ;; prove equality between new representative and the RHS 
       (set (EqGraph newrep rhs)
               (RuleEquality ruleproof
                  newrep rhs))
       (set (EqGraph newrep rhs)
               (Flip (RuleEquality ruleproof
                  newrep rhs)))))


;; ########################## PROOF RULES

(ruleset proof-rules)
;; children
(rule ((= a (AstAdd c1 c2)))
      ((set (Child1 a) c1)
       (set (Child2 a) c2))
      :ruleset proof-rules)
(rule ((= a (AstSub c1 c2)))
      ((set (Child1 a) c1)
       (set (Child2 a) c2))
      :ruleset proof-rules)

(rule ((= trmprf (MakeTrmPrf t p)))
      ((set (TrmOf trmprf) t)
       (set (PrfOf trmprf) p))
      :ruleset proof-rules)


(ruleset proof-extract)

;; Silly function to get the proof
(function GetProof (AstMath) Proof :cost 1000000000)
(rule ((= tp (AddRep a b))
       (= term (TrmOf tp))
       (= proof (PrfOf tp)))
      ((set (GetProof term) proof))
      :ruleset proof-extract)
(rule ((= tp (SubRep a b))
       (= term (TrmOf tp))
       (= proof (PrfOf tp)))
      ((set (GetProof term) proof))
      :ruleset proof-extract)
(rule ((= tp (ConstRep a))
       (= term (TrmOf tp))
       (= proof (PrfOf tp)))
      ((set (GetProof term) proof))
      :ruleset proof-extract)
(rule ((= tp (VarRep a))
       (= term (TrmOf tp))
       (= proof (PrfOf tp)))
      ((set (GetProof term) proof))
      :ruleset proof-extract)

;; start term, end term, current progress term, proof
(function ProofBetween (AstMath AstMath AstMath) ProofList :cost 100000 :merge old)

;; start proof search for equalities
(rule ((= e (DemandEq t1 t2)))
      ((set (ProofBetween t1 t2 t1) (Null)))
      :ruleset proof-extract)
;; do one step of proof search to find a path
(rule ((= proof (ProofBetween t1 t2 tmid))
       (= eproof (EqGraph tmid next)))
      ((set (ProofBetween t1 t2 next)
            (Cons eproof proof)))
      :ruleset proof-extract)
;; when you find a path, union it with the equality proof
(rule ((= e (DemandEq t1 t2))
       (= prooflist (ProofBetween t1 t2 t2)))
      ((set (DemandEq t1 t2) (Transitivity prooflist)))
      :ruleset proof-extract)



(define two (rational 2 1))
(define start1 (Add (Var "x") (Const two)))
;; add original proofs
(set (VarRep "x")
     (MakeTrmPrf (AstVar "x") (Original (AstVar "x"))))
(set (ConstRep two)
     (MakeTrmPrf (AstConst two) (Original (AstConst two))))
(define addx2 (AstAdd (AstVar "x") (AstConst two)))
(define add2x (AstAdd (AstConst two) (AstVar "x")))
(set (AddRep (Var "x") (Const two))
     (MakeTrmPrf
       addx2
       (Original (AstAdd (AstVar "x") (AstConst two)))))

(run proof-rules 1000)
(run 1)
(run proof-rules 1000)
(run 1)
(run proof-rules 1000)
(run 1)
(run proof-rules 1000)

(define zero (AstConst (rational 0 1)))
(define addzero (AstAdd addx2 zero))
(define addzerofront (AstAdd (AstAdd zero (AstVar "x")) (AstConst two)))

(DemandEq addx2 add2x)
(DemandEq addx2 addzerofront)

(run proof-extract 100)


(check (!= (Var "x") (Const two)))
(check (= (Add (Var "x") (Const two))
          (Add (Const two) (Var "x"))))
(check
  (= (GetProof (AstAdd (AstVar "x") (AstConst two)))
     (Original (AstAdd (AstVar "x") (AstConst two)))))

(check
  (= (GetProof add2x)
     (RuleTerm
       (Rule (Cons (Original addx2) (Null))"add-commute")
       add2x
       )))

(check (= (DemandEq addx2 add2x)
          (Transitivity
            (Cons
              (RuleEquality
                (Rule (Cons (Original addx2) (Null))"add-commute")
                addx2
                add2x)
              (Null)))))


(check (= (DemandEq addx2 addzero)
          (Transitivity
            (Cons
              (RuleEquality
                (Rule
                  (Cons
                    (Original addx2) (Null)) "add-identity")
                addx2
                addzero)
              (Null)))))

(check (= (DemandEq addx2 addzerofront)
          (Transitivity
            (Cons
              ;; 0+(x+2) -> (0+x)+2
              (RuleEquality
                ;; proof that the assoc rule fires
                (Rule
                  (Cons
                   (Congruence 
                     ;; proof of 0+(x+2)
                     (RuleTerm
                      (Rule (Cons (RuleTerm (Rule (Cons (Original (addx2)) (Null)) "add-identity") (addzero)) (Null)) "add-commute")
                     (AstAdd (zero) (addx2)))
                    
                     ;; children already equal
                     (Cons (Transitivity (Null)) (Cons (Transitivity (Null)) (Null))))
                   (Null)) "add-assoc")
                (AstAdd (zero) (addx2)) (addzerofront))
              
              
              ;; (x+2)+0 -> 0+(x+2)
              (Cons
                (RuleEquality
                  (Rule (Cons (RuleTerm (Rule (Cons (Original (addx2)) (Null)) "add-identity") (addzero)) (Null)) "add-commute")
                  
                  (addzero)
                  
                  (AstAdd (zero) (addx2)))
              
              ;; x+2 -> (x+2)+0
              (Cons (RuleEquality
                      (Rule (Cons (Original (addx2)) (Null)) "add-identity")
                      (addx2)
                      (addzero))
              
              (Null))))
          )))