(function() {
    var type_impls = Object.fromEntries([["egglog",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BaseValue-for-u64\" class=\"impl\"><a href=\"#impl-BaseValue-for-u64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"egglog/trait.BaseValue.html\" title=\"trait egglog::BaseValue\">BaseValue</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h3></section></summary><div class=\"impl-items\"><section id=\"associatedconstant.MAY_UNBOX\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MAY_UNBOX\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"egglog/trait.BaseValue.html#associatedconstant.MAY_UNBOX\" class=\"constant\">MAY_UNBOX</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a> = true</h4></section><section id=\"method.try_box\" class=\"method trait-impl\"><a href=\"#method.try_box\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"egglog/trait.BaseValue.html#method.try_box\" class=\"fn\">try_box</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"egglog/struct.Value.html\" title=\"struct egglog::Value\">Value</a>&gt;</h4></section><section id=\"method.try_unbox\" class=\"method trait-impl\"><a href=\"#method.try_unbox\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"egglog/trait.BaseValue.html#method.try_unbox\" class=\"fn\">try_unbox</a>(val: <a class=\"struct\" href=\"egglog/struct.Value.html\" title=\"struct egglog::Value\">Value</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a>&gt;</h4></section><section id=\"method.intern\" class=\"method trait-impl\"><a href=\"#method.intern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"egglog/trait.BaseValue.html#method.intern\" class=\"fn\">intern</a>(&amp;self, table: &amp;InternTable&lt;Self, <a class=\"struct\" href=\"egglog/struct.Value.html\" title=\"struct egglog::Value\">Value</a>&gt;) -&gt; <a class=\"struct\" href=\"egglog/struct.Value.html\" title=\"struct egglog::Value\">Value</a></h4></section><section id=\"method.as_any\" class=\"method trait-impl\"><a href=\"#method.as_any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"egglog/trait.BaseValue.html#method.as_any\" class=\"fn\">as_any</a>(&amp;self) -&gt; &amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a> + 'static)</h4></section></div></details>","BaseValue","egglog::extract::DefaultCost"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Cost-for-u64\" class=\"impl\"><a class=\"src rightside\" href=\"src/egglog/extract.rs.html#75\">Source</a><a href=\"#impl-Cost-for-u64\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"egglog/extract/trait.Cost.html\" title=\"trait egglog::extract::Cost\">Cost</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.u64.html\">u64</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.identity\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/egglog/extract.rs.html#75\">Source</a><a href=\"#method.identity\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"egglog/extract/trait.Cost.html#tymethod.identity\" class=\"fn\">identity</a>() -&gt; Self</h4></section></summary><div class='docblock'>An identity element, usually zero.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unit\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/egglog/extract.rs.html#75\">Source</a><a href=\"#method.unit\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"egglog/extract/trait.Cost.html#tymethod.unit\" class=\"fn\">unit</a>() -&gt; Self</h4></section></summary><div class='docblock'>The default cost for a node with no children, usually one.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.combine\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/egglog/extract.rs.html#75\">Source</a><a href=\"#method.combine\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"egglog/extract/trait.Cost.html#tymethod.combine\" class=\"fn\">combine</a>(self, other: &amp;Self) -&gt; Self</h4></section></summary><div class='docblock'>A binary operation to combine costs, usually addition.\nThis operation must NOT overflow or panic when given large values!</div></details></div></details>","Cost","egglog::extract::DefaultCost"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[4978]}