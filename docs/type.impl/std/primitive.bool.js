(function() {
    var type_impls = Object.fromEntries([["egglog",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BaseValue-for-bool\" class=\"impl\"><a href=\"#impl-BaseValue-for-bool\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"egglog/trait.BaseValue.html\" title=\"trait egglog::BaseValue\">BaseValue</a> for <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_unbox\" class=\"method trait-impl\"><a href=\"#method.try_unbox\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"egglog/trait.BaseValue.html#method.try_unbox\" class=\"fn\">try_unbox</a>(val: <a class=\"struct\" href=\"egglog/struct.Value.html\" title=\"struct egglog::Value\">Value</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a>&gt;</h4></section></summary><div class=\"docblock\"><p>see <a href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html#method.try_box\" title=\"method bool::try_box\"><code>bool::try_box</code></a></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_box\" class=\"method trait-impl\"><a href=\"#method.try_box\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"egglog/trait.BaseValue.html#method.try_box\" class=\"fn\">try_box</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.87.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"egglog/struct.Value.html\" title=\"struct egglog::Value\">Value</a>&gt;</h4></section></summary><div class=\"docblock\"><p>To optimize storage, we map <a href=\"egglog/struct.Value.html\" title=\"struct egglog::Value\"><code>Value</code></a> 1 to true and 0 to false in the implementation.\nAs an example, the <code>subsumed</code> column of a table has type bool.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>egglog_core_relations::BaseValue;\n<span class=\"kw\">let </span>true_value = <span class=\"bool-val\">true</span>.try_box().unwrap();\n<span class=\"kw\">let </span>false_value = <span class=\"bool-val\">false</span>.try_box().unwrap();\n<span class=\"macro\">assert_eq!</span>(bool::try_unbox(true_value).unwrap(), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(bool::try_unbox(false_value).unwrap(), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><section id=\"associatedconstant.MAY_UNBOX\" class=\"associatedconstant trait-impl\"><a href=\"#associatedconstant.MAY_UNBOX\" class=\"anchor\">§</a><h4 class=\"code-header\">const <a href=\"egglog/trait.BaseValue.html#associatedconstant.MAY_UNBOX\" class=\"constant\">MAY_UNBOX</a>: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.87.0/std/primitive.bool.html\">bool</a> = true</h4></section><section id=\"method.intern\" class=\"method trait-impl\"><a href=\"#method.intern\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"egglog/trait.BaseValue.html#method.intern\" class=\"fn\">intern</a>(&amp;self, table: &amp;InternTable&lt;Self, <a class=\"struct\" href=\"egglog/struct.Value.html\" title=\"struct egglog::Value\">Value</a>&gt;) -&gt; <a class=\"struct\" href=\"egglog/struct.Value.html\" title=\"struct egglog::Value\">Value</a></h4></section><section id=\"method.as_any\" class=\"method trait-impl\"><a href=\"#method.as_any\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"egglog/trait.BaseValue.html#method.as_any\" class=\"fn\">as_any</a>(&amp;self) -&gt; &amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/1.87.0/core/any/trait.Any.html\" title=\"trait core::any::Any\">Any</a> + 'static)</h4></section></div></details>","BaseValue","egglog::ast::Subsume"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[4096]}