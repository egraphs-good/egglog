searchState.loadedDescShard("egglog", 0, "egglog\nA simple data type that can be interned in a database.\nOutput from a command.\nA trait implemented by container types.\nA dummy node used to represent omitted nodes.\nThe main interface for an e-graph in egglog.\nA handle on a database that may be in the process of …\nThe best function found after extracting\nThe variants of a function found after extracting\nA function in the e-graph.\nA user defined function call.\nA struct representing the content of a row in a function …\nThe report from all runs\nA trait for implementing custom primitive operations in …\nA primitive value.\nThe name of all functions and their sizes\nA printed function and all its values\nThe size of a function\nThe report from a single run\nOutput of serializing an e-graph, including values that …\nA node in the serialized egraph.\nA node that was split into multiple e-classes.\nLike <code>Expr</code>s but with sharing and deduplication.\nA hashconsing arena for <code>Term</code>s.\nA user defined output\nA user-defined command allows users to inject custom …\nA user-defined command output trait.\nA generic identifier representing an egglog value\nAdd a user-defined sort to the e-graph.\nAdd a user-defined command to the e-graph\nAdd a user-defined primitive\nThis macro lets the user declare custom egglog primitives. …\nRegister a new scheduler and return its id.\nAdd a user-defined sort to the e-graph.\nMake and return a <code>Term::App</code> with the given head symbol and …\nApplies the primitive operation to the given arguments.\nConvert from a Rust type to an egglog value.\nCall an external function.\nWhether this function supports subsumption.\nGets the value for a serialized class ID.\nStart a command-line interface for the E-graph.\nConvert from a Rust container type to an egglog value.\nAdds sorts and constructor tables to the database.\nDeclare a sort. This corresponds to the <code>sort</code> keyword in …\nFunctions that were discarded from the output, because …\nA basic method for dumping the state of the database to …\nThe serialized e-graph.\nEvaluates an expression, returns the sort of the …\nRecursively converts the given expression to a term.\nExtract a value to a <code>TermDag</code> and <code>Term</code> in the <code>TermDag</code> using …\nExtract a value to a string for printing. See also …\nExtract a value to a <code>TermDag</code> and <code>Term</code> in the <code>TermDag</code>. Note …\nFormat the command output for display, ending with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the serialized node for the node ID.\nExtract rows of a table using the default cost model with …\nConvert the given id to the corresponding term.\nReturns a sort based on the predicate.\nReturns all sorts that satisfy the predicate.\nGet the type at position <code>index</code>, counting the <code>output</code> sort …\nGet the canonical representation for <code>val</code> based on type.\nGet a function by name.\nGets the overall run report and returns it.\nGet the size of a function in the e-graph.\nReturns a sort based on the type.\nReturns a sort that satisfies the type and predicate.\nReturns the sort with the given name if it exists.\nReturns all sorts based on the type.\nReturns all sorts that satisfy the type and predicate.\nGet an immutable reference to the table with id <code>table</code>. …\nConstructs a type constraint for the primitive that uses …\nreturn the inner representation of id as usize\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the serialization is complete and no …\nReturns true if the node is a primitive value.\nIterate over the contents of the container.\nMake and return a <code>Term::Lit</code> with the given literal, and …\nConvert the given term to its id.\nLookup a tuple in afunction in the e-graph.\nReturns the name of this primitive operation.\nGet the name of the function.\nGet the number of tuples in the database.\nDescription of what was omitted from the e-graph\nTakes a source program <code>input</code>, parses it, runs it, and …\nPop the current egraph off the stack, replacing it with …\nA variant of <code>ExecutionState::predict_val</code> that avoids …\nGet the <em>current</em> value for a given key in <code>table</code>, or …\nThis module makes it easier to use <code>egglog</code> from Rust. It is …\nPrint up to <code>n</code> the tuples in a given function. Print all …\nPrint the size of a function. If no function name is …\nPush a snapshot of the e-graph into the stack.\nRebuild an additional container in place according the the …\nRemoves a scheduler\nreturn the inner representation of id.\nStart a Read-Eval-Print Loop with standard I/O.\nStart a Read-Eval-Print Loop with the given input and …\nRun a program, represented as an AST. Return a list of …\nGet the schema of the function.\nSerialize the egraph into a format that can be read by the …\nReturns the number of nodes in this DAG.\nStage an insertion of the given row into <code>table</code>.\nStage a removal of the given row from <code>table</code> if it is …\nRuns a ruleset for an iteration.\nRuns a ruleset for one iteration using the given ruleset\nRecursively converts the given term to an expression.\nGets the serialized node ID for the primitive, omitted, or …\nConverts the given term to a string.\nFunctions with more calls than max_calls_per_function, so …\nRun the command with the given arguments.\nConvert from an egglog value to a Rust type.\nGets the serialized class ID for a value.\nConvert from an egglog value to a reference of a Rust …\nMake and return a <code>Term::Var</code> with the given symbol, and …\nThe name of the function.\nThe offset of the index in the table. This can be resolved …\nPerform an <code>Action</code> on the global database (see …\nPerform an <code>Action</code> on the global database (see …\nUsing the <code>ruleset</code> command, defines a new ruleset that can …\nUsing the <code>ruleset</code> command, defines a new ruleset that can …\nSimilar to <code>Command::Rewrite</code>, but generates two rules, one …\nSimilar to <code>Command::Rewrite</code>, but generates two rules, one …\nChange a function entry.\nDelete or subsume (mark as hidden from future rewrites …\nDelete or subsume (mark as hidden from future rewrites …\nThe <code>check</code> command checks that the given facts match at …\nThe <code>check</code> command checks that the given facts match at …\nThe <code>constructor</code> command defines a new constructor for a …\nThe <code>constructor</code> command defines a new constructor for a …\nEgglog supports three types of functions\nEgglog supports three types of functions\n<code>delete</code> this entry from a function. Be wary! Only delete …\n<code>extract</code> a datatype from the egraph, choosing the smallest …\n<code>extract</code> a datatype from the egraph, choosing the smallest …\nAssert that a command fails with an error.\nAssert that a command fails with an error.\nThe <code>function</code> command declare an egglog custom function, …\nThe <code>function</code> command declare an egglog custom function, …\nA <code>Command</code> is the top-level construct in egglog. It …\nFacts are the left-hand side of a [<code>Command::Rule</code>]. They …\nRepresents the declaration of a function directly parsed …\nA <code>NCommand</code> is a desugared <code>Command</code>, where syntactic sugars …\nInclude another egglog file directly as text and run it.\nInclude another egglog file directly as text and run it.\nInput a CSV file directly into a function.\nInput a CSV file directly into a function.\nBind a variable to a particular datatype or primitive. At …\nBind a variable to a particular datatype or primitive. At …\nExtract and output a set of expressions to a file.\nExtract and output a set of expressions to a file.\n<code>pop</code> the current egraph, restoring the previous one. The …\n<code>pop</code> the current egraph, restoring the previous one. The …\nPrint out rows of a given function, extracting each of the …\nPrint out rows of a given function, extracting each of the …\nThe mode of printing a function. The default mode prints …\nPrint runtime statistics about rules and rulesets so far.\nPrint runtime statistics about rules and rulesets so far.\nPrint out the number of rows in a function or all …\nPrint out the number of rows in a function or all …\n<code>push</code> the current egraph <code>n</code> times so that it is saved. …\n<code>push</code> the current egraph <code>n</code> times so that it is saved. …\nThe <code>relation</code> command declares a named relation Example:\nThe <code>relation</code> command declares a named relation Example:\n<code>rewrite</code> is syntactic sugar for a specific form of <code>rule</code> …\n<code>rewrite</code> is syntactic sugar for a specific form of <code>rule</code> …\nRuns a <code>Schedule</code>, which specifies rulesets and the number …\nRuns a <code>Schedule</code>, which specifies rulesets and the number …\n<code>set</code> a function to a particular result. <code>set</code> should not be …\n<code>set</code> a function to a particular result. <code>set</code> should not be …\nCreate a new user-defined sort, which can then be used in …\nCreate a new user-defined sort, which can then be used in …\n<code>subsume</code> this entry so that it cannot be queried or …\n<code>union</code> two datatypes, making them equal in the implicit, …\n<code>union</code> two datatypes, making them equal in the implicit, …\nUsing the <code>combined-ruleset</code> command, construct another …\nUsing the <code>combined-ruleset</code> command, construct another …\nUser-defined command.\nUser-defined command.\nConstructs a <code>constructor</code>\nConstructs a <code>constructor</code>\nConverts the rewrite into an s-expression.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>function</code>\nConstructs a <code>function</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs this a reference to a global variable? After the …\nGlobals are desugared to functions, with this flag set to …\nGlobals are desugared to functions, with this flag set to …\nA globally unique name for this rule in the EGraph.\nA globally unique name for this rule in the EGraph.\nConstructs a <code>relation</code>\nConstructs a <code>relation</code>\nRemove global variables from the program by translating …\nThe ruleset this rule belongs to. Defaults to <code>&quot;&quot;</code>.\nThe ruleset this rule belongs to. Defaults to <code>&quot;&quot;</code>.\n<code>subst</code> replaces occurrences of variables and head symbols …\nApplys <code>f</code> to all sub-expressions (including <code>self</code>) …\nApplys <code>f</code> to all sub-expressions (including <code>self</code>) …\nA type constraint that requires all or some arguments to …\nA mapping from variables to their assigned values. This is …\nA constraint that can be applied to variable assignments. …\nErrors that can occur during constraint solving. These …\nAn impossible constraint was encountered during solving\nRepresents constraints that are logically impossible to …\nA variable was assigned two different, incompatible values\nNone of the alternative constraints in an XOR constraint …\nA constraint satisfaction problem consisting of …\nA type constraint that assigns specific sorts to each …\nA trait for generating type constraints from atom …\nA variable in the constraint range was not assigned any …\nCreates a conjunction constraint that requires all …\nCreates an assignment constraint that binds a variable to …\nThe list of constraints that must be satisfied\nCreates an equality constraint between two variables. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates constraints for the given arguments based on …\nGet the value from the assignment.\nCreates an implication constraint that activates when all …\nCreates a constraint that always fails with the given …\nInsert into the assignment.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts self to a boxed type constraint.\nConverts self into a boxed type constraint.\nConstructs a <code>SimpleTypeConstraint</code>\nCreates the <code>AllEqualTypeConstraint</code>.\nReturns a human-readable string representation of this …\nThe set of variables that must be assigned a value for the …\nConverts a <code>ConstraintError</code> produced by type checking into …\nUpdates the assignment based on this constraint. Returns …\nRequires all arguments to have the given sort. If …\nRequires the length of arguments to be <code>exact_length</code>. Note …\nRequires the output argument to have the given sort.\nCreates an exclusive-or constraint that requires exactly …\nRequirements for a type to be usable as a cost by a …\nAn interface for custom cost model.\nThe default, Bellman-Ford like extractor. This extractor …\nA cost model that computes the cost by summing the cost of …\nCompute the cost of a (non-container) primitive value.\nA binary operation to combine costs, usually addition. …\nBulk of the computation happens at initialization time. …\nThe cost of a container value given the costs of its …\nThe cost of an enode (without the cost of children)\nA convenience method for extraction.\nExtract the best term of a value from a given sort.\nA convenience method for extracting variants of a value.\nExtract variants of an e-class.\nThe total cost of a term given the cost of the root e-node …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAn identity element, usually zero.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe default cost for a node with no children, usually one.\nA “default” implementation of <code>Sort</code> for simple types …\nA “default” implementation of <code>Sort</code> for types which …\nThe result of a query.\nA wrapper around an <code>ExecutionState</code> for rules that are …\nAdd a <code>BaseSort</code> to the e-graph\nDeclare a new constructor table.\nDeclare a new function table.\nDeclare a new relation table.\nCreate a new ruleset.\nDeclare a new sort.\nCheck if any matches were returned at all.\nConvert from a Rust type to an egglog value.\nConvert from a Rust container type to an egglog value.\nAdds sorts and constructor tables to the database.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert a row into a table. For more information, see …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an iterator over the query results, where each match …\nDo a table lookup. This is potentially a mutable operation!\nPanic. You should also return <code>None</code> from your callback if …\nRun a query over the database.\nRemove a row from a table. For more information, see …\nAdd a rule to the e-graph whose right-hand side is made up …\nRun one iteration of a ruleset.\nAdd a rule to the e-graph whose right-hand side is a Rust …\nSubsume a row in a table. For more information, see …\nUnion two values in the e-graph. For more information, see …\nConvert from an egglog value to a Rust type.\nConvert from an egglog value to reference of Rust …\nCreates a boolean literal expression.\nCreates a function call expression.\nCreates a float literal expression.\nCreates an integer literal expression.\nCreates a string literal expression.\nCreates a unit literal expression.\nCreates a variable expression.\nA match is a tuple of values corresponding to the …\nA collection of matches produced by a rule. The user can …\nA scheduler decides which matches to be applied for a rule.\nA unique identifier for a scheduler in the EGraph.\nWhether or not the rules can be considered as saturated …\nPick the match at <code>idx</code> to be fired.\nPick all matches to be fired.\nFilter the matches for a rule.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet <code>idx</code>-th match.\nGet the value corresponding a variable in this match.\nreturn the inner representation of id as usize\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe number of matches in total.\nreturn the inner representation of id.\nThe length of a tuple.\nA registry for base value types and functions on them.\nRational numbers supporting these primitives:\nA newtype wrapper used to implement the <code>BaseValue</code> trait on …\nA trait implemented by container types.\nA handle on a database that may be in the process of …\n64-bit floating point numbers supporting these primitives:\nSigned 64-bit integers supporting these primitives:\nA map from a key type to a value type supporting these …\nA wrapper around floats providing implementations of <code>Eq</code>, …\nCustom functions used for tables that encode a bulk …\nA sort (type) in the e-graph that defines values in …\nCall function (primitive or table) <code>name</code> with value args …\nReturns the backend-specific column type. See <code>ColumnTy</code>.\nIterate over the containers of the given type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a &amp;str to <code>OrderedFloat</code>. Returns an error if the …\nGet a <code>Value</code> representing the given base value <code>p</code>.\nGet the <code>BaseValueId</code> for the given base value type <code>P</code>.\nGet the <code>BaseValueId</code> for the given base value type id.\nGet the container associated with the value <code>val</code> in the …\nThe column that contains values that should be rebuilt. If …\nreturn the inner sorts if a container sort remember that …\nReturn the inner values and sorts. Only container sort …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the value out.\nIterate over the contents of the container.\nReturns the name of this sort.\nApply the given rebuild to the contents of each container.\nRebuild a contiguous slice of rows in the table.\nRebuild an additional container in place according the the …\nRebuild a slice of values in place, returning true if any …\nRebuild an arbitrary subset of the table.\nReconstruct a leaf primitive value in a TermDag\nReconstruct a container value in a TermDag\nRegister the given type <code>P</code> as a base value type in this …\nAdd a new container type to the given <code>ContainerValue</code> …\nReturn the serialized name of the sort\nGet the base value of type <code>P</code> corresponding to the given …\nReturn the type id of values that this sort represents.\nThis trait lets us statically dispatch between <code>fresh</code> …\nGenerates fresh symbols for internal use during …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")