use crate::ast::*;
use crate::Symbol;
use crate::Schedule;
use ordered_float::OrderedFloat;

grammar(srcfile: &Arc<SrcFile>);

extern {
    type Error = String;
}

// lexer
match {
    r"\s*" => { }, // skip whitespace
    r";[^\n\r]*[\n\r]*" => { }, // skip ; comments
    _
}


pub Program: Vec<Command> = { (Command)* => <> }



LParen: usize = {
    <@L> "(" => <>,
    <@L> "[" => <>,
};
RParen: usize = {
    ")" <@R> => <>,
    "]" <@R> => <>,
};

List<T>: Vec<T> = {
    LParen <T*> RParen => <>,
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Command: Command = {
    LParen "set-option" <name:Ident> <value:Expr> RParen => Command::SetOption { name, value },
    <lo:LParen> "datatype" <name:Ident> <variants:(Variant)*> <hi:RParen> => Command::Datatype { span: Span(srcfile.clone(), lo, hi), name, variants },
    <lo:LParen> "sort" <name:Ident> LParen <head:Ident> <tail:(Expr)*> RParen <hi:RParen> => Command::Sort (Span(srcfile.clone(), lo, hi), name, Some((head, tail))),
    <lo:LParen> "sort" <name:Ident> <hi:RParen> => Command::Sort (Span(srcfile.clone(), lo, hi), name, None),
    <lo:LParen> "function" <name:Ident> <schema:Schema> <cost:Cost>
        <unextractable:(":unextractable")?>
        <merge_action:(":on_merge" <List<Action>>)?>
        <merge:(":merge" <Expr>)?> <default:(":default" <Expr>)?> <hi:RParen> => {
        Command::Function(FunctionDecl { span: Span(srcfile.clone(), lo, hi), name, schema, merge, merge_action: Actions::new(merge_action.unwrap_or_default()), default, cost, unextractable: unextractable.is_some(), ignore_viz: false })
    },
    <lo:LParen> "relation" <constructor:Ident> <inputs:List<Type>> <hi:RParen> => Command::Relation{span: Span(srcfile.clone(), lo, hi), constructor, inputs},
    LParen "ruleset" <name:Ident> RParen => Command::AddRuleset(name),
    LParen "unstable-combined-ruleset" <name:Ident> <subrulesets:Ident*> RParen => Command::UnstableCombinedRuleset(name, subrulesets),
    <lo:LParen> "rule" <body:List<Fact>> <head:List<Action>> 
        <ruleset:(":ruleset" <Ident>)?> 
        <name:(":name" <String>)?> 
    <hi:RParen> => Command::Rule{ruleset: ruleset.unwrap_or("".into()), name: name.unwrap_or("".to_string()).into(), rule: Rule { span: Span(srcfile.clone(), lo, hi), head: Actions::new(head), body }},
    <lo:LParen> "rewrite" <lhs:Expr> <rhs:Expr>
        <subsume:(":subsume")?>
        <conditions:(":when" <List<Fact>>)?>
        <ruleset:(":ruleset" <Ident>)?>
    <hi:RParen> => Command::Rewrite(ruleset.unwrap_or("".into()), Rewrite { span: Span(srcfile.clone(), lo, hi), lhs, rhs, conditions: conditions.unwrap_or_default() }, subsume.is_some()),
    <lo:LParen> "birewrite" <lhs:Expr> <rhs:Expr>
        <conditions:(":when" <List<Fact>>)?>
        <ruleset:(":ruleset" <Ident>)?>
    <hi:RParen> => Command::BiRewrite(ruleset.unwrap_or("".into()), Rewrite { span: Span(srcfile.clone(), lo, hi), lhs, rhs, conditions: conditions.unwrap_or_default() }),
    <lo:LParen> "let" <name:Ident> <expr:Expr> <hi:RParen> => Command::Action(Action::Let(Span(srcfile.clone(), lo, hi), name, expr)),
    <NonLetAction> => Command::Action(<>),
    <lo:LParen> "run" <limit:UNum>  <until:(":until" <(Fact)*>)?> <hi:RParen> => 
        Command::RunSchedule(Schedule::Repeat(Span(srcfile.clone(), lo, hi), limit, Box::new(
            Schedule::Run(Span(srcfile.clone(), lo, hi), RunConfig { ruleset : "".into(), until })))),
    <lo:LParen> "run" <ruleset: Ident> <limit:UNum> <until:(":until" <(Fact)*>)?> <hi:RParen> => 
        Command::RunSchedule(Schedule::Repeat(Span(srcfile.clone(), lo, hi), limit, Box::new(
            Schedule::Run(Span(srcfile.clone(), lo, hi), RunConfig { ruleset, until })))),
    <lo:LParen> "simplify"  <schedule:Schedule> <expr:Expr> <hi:RParen>
        => Command::Simplify { span: Span(srcfile.clone(), lo, hi), expr, schedule },
    <lo:LParen> "query-extract" <variants:(":variants" <UNum>)?> <expr:Expr> <hi:RParen> => Command::QueryExtract { span: Span(srcfile.clone(), lo, hi), expr, variants: variants.unwrap_or(0) },
    <lo:LParen> "check" <facts:(Fact)*> <hi:RParen> => Command::Check(Span(srcfile.clone(), lo, hi), facts),
    LParen "check-proof" RParen => Command::CheckProof,
      <lo:LParen> "run-schedule" <scheds:Schedule*> <hi:RParen> => 
        Command::RunSchedule(Schedule::Sequence(Span(srcfile.clone(), lo, hi), scheds)),
    LParen "print-stats" RParen => Command::PrintOverallStatistics,
    LParen "push" <UNum?> RParen => Command::Push(<>.unwrap_or(1)),
    <lo:LParen> "pop" <n:UNum?> <hi:RParen> => Command::Pop(Span(srcfile.clone(), lo, hi), n.unwrap_or(1)),
    <lo:LParen> "print-function" <sym:Ident> <n:UNum> <hi:RParen> => Command::PrintFunction(Span(srcfile.clone(), lo, hi), sym, n),
    <lo:LParen> "print-size" <sym:Ident?> <hi:RParen> => Command::PrintSize(Span(srcfile.clone(), lo, hi), sym),
    <lo:LParen> "input" <name:Ident> <file:String> <hi:RParen> => Command::Input { span: Span(srcfile.clone(), lo, hi), name, file },
    <lo:LParen> "output" <file:String> <exprs:Expr+> <hi:RParen> => Command::Output { span: Span(srcfile.clone(), lo, hi), file, exprs },
    <lo:LParen> "fail" <c:Command> <hi:RParen> => Command::Fail(Span(srcfile.clone(), lo, hi), Box::new(c)),
    <lo:LParen> "include" <file:String> <hi:RParen> => Command::Include(Span(srcfile.clone(), lo, hi), file),
}

Schedule: Schedule = {
    <lo:LParen> "saturate" <scheds:Schedule*> <hi:RParen> => 
        Schedule::Saturate(Span(srcfile.clone(), lo, hi), Box::new(
            Schedule::Sequence(Span(srcfile.clone(), lo, hi), scheds))),
    <lo:LParen> "seq" <scheds:Schedule*> <hi:RParen> => 
        Schedule::Sequence(Span(srcfile.clone(), lo, hi), scheds),
    <lo:LParen> "repeat" <limit:UNum> <scheds:Schedule*> <hi:RParen> => 
        Schedule::Repeat(Span(srcfile.clone(), lo, hi), limit, Box::new(
            Schedule::Sequence(Span(srcfile.clone(), lo, hi), scheds))),
    <lo:LParen> "run" <until:(":until" <(Fact)*>)?> <hi:RParen> =>
        Schedule::Run(Span(srcfile.clone(), lo, hi), RunConfig { ruleset: "".into(), until }),
    <lo:LParen> "run" <ruleset: Ident> <until:(":until" <(Fact)*>)?> <hi:RParen> => 
        Schedule::Run(Span(srcfile.clone(), lo, hi), RunConfig { ruleset, until }),
    <lo:@L> <ident:Ident> <hi:@R> => 
        Schedule::Run(Span(srcfile.clone(), lo, hi), RunConfig { ruleset: ident, until: None }),
}

Cost: Option<usize> = {
    ":cost" <UNum> => Some(<>),
    => None,
}

NonLetAction: Action = {
    <lo:LParen> "set" LParen <f: Ident> <args:Expr*> RParen <v:Expr> <hi:RParen> => Action::Set ( Span(srcfile.clone(), lo, hi), f, args, v ),
    <lo:LParen> "delete" LParen <f: Ident> <args:Expr*> RParen <hi:RParen> => Action::Change ( Span(srcfile.clone(), lo, hi), Change::Delete, f, args),
    <lo:LParen> "subsume" LParen <f: Ident> <args:Expr*> RParen <hi:RParen> => Action::Change ( Span(srcfile.clone(), lo, hi), Change::Subsume, f, args),
    <lo:LParen> "union" <e1:Expr> <e2:Expr> <hi:RParen> => Action::Union(Span(srcfile.clone(), lo, hi), e1, e2),
    <lo:LParen> "panic" <msg:String> <hi:RParen> => Action::Panic(Span(srcfile.clone(), lo, hi), msg),
    <lo:LParen> "extract" <expr:Expr> <hi:RParen> => Action::Extract(Span(srcfile.clone(), lo, hi), expr, Expr::Lit(Span(srcfile.clone(), lo, hi), Literal::Int(0))),
    <lo:LParen> "extract" <expr:Expr> <variants:Expr> <hi:RParen> => Action::Extract(Span(srcfile.clone(), lo, hi), expr, variants),
    <lo:@L> <e:CallExpr> <hi:@R> => Action::Expr(Span(srcfile.clone(), lo, hi), e),
}

pub Action: Action = {
    <lo:LParen> "let" <name:Ident> <expr:Expr> <hi:RParen> => Action::Let(Span(srcfile.clone(), lo, hi), name, expr),
    <NonLetAction> => <>,
}

Name: Symbol = { "[" <Ident> "]" => <> }

pub Fact: Fact = {
    <lo:LParen> "=" <mut es:Expr+> <e:Expr> <hi:RParen> => {
        es.push(e);
        Fact::Eq(Span(srcfile.clone(), lo, hi), es)
    },
    <CallExpr> => Fact::Fact(<>),
}

Schema: Schema = {
    <types:List<Type>> <output:Type> => Schema { input: types, output }
}

pub Expr: Expr = {
    <lo:@L> <lit:Literal> <hi:@R> => Expr::Lit(Span(srcfile.clone(), lo, hi), lit),
    <lo:@L> <id:Ident> <hi:@R> => Expr::Var(Span(srcfile.clone(), lo, hi), id),
    <CallExpr> => <>,
};

Literal: Literal = {
    "(" ")" => Literal::Unit,
    <Num> => Literal::Int(<>),
    <F64> => Literal::F64(<>),
    <Bool> => Literal::Bool(<>),
    <SymString> => Literal::String(<>),
}

Bool: bool = {
    "true" => true,
    "false" => false,
}

CallExpr: Expr = {
    <lo:LParen> <head:Ident> <tail:(Expr)*> <hi:RParen> => Expr::Call(Span(srcfile.clone(), lo, hi), head, tail),
}

ExprList: Vec<Expr> = { LParen <sexps:(Expr)*> RParen => sexps }

Variant: Variant = {
    <lo:LParen> <name:Ident> <types:(Type)*> <cost:Cost> <hi:RParen> => Variant { span: Span(srcfile.clone(), lo, hi), name, types, cost },
}

Type: Symbol = <Ident>;

IdentSort: IdentSort = LParen <ident:Ident> <sort:Type> RParen => IdentSort { ident, sort };
Num: i64 = <s:r"(-)?[0-9]+"> => s.parse().unwrap();
UNum: usize = {
    <Num> => <>.try_into().unwrap(),
}

F64: OrderedFloat<f64> = {
    "NaN" => OrderedFloat::<f64>(f64::NAN),
    <s:r"(-)?[0-9]+\.[0-9]+(e(\+)?(-)?[0-9]+)?"> => OrderedFloat::<f64>(s.parse().unwrap()),
    "inf" => OrderedFloat::<f64>(f64::INFINITY),
    "-inf" => OrderedFloat::<f64>(f64::NEG_INFINITY),
}
Ident: Symbol = <s:r"(([[:alpha:]][\w-]*)|([-+*/?!=<>&|^/%_]))+"> => s.parse().unwrap();
SymString: Symbol = <String> => Symbol::from(<>);

String: String = <r#"("[^"]*")+"#> => {
    let string: &str = <>;
    let first_last_off: &str = &string[1..string.len() - 1];
    first_last_off.replace("\"\"", "\"")
};
