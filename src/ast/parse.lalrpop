use crate::ast::*;
use crate::Symbol;
use crate::Schedule;
use ordered_float::OrderedFloat;

grammar;

extern {
    type Error = String;
}

// lexer
match {
    r"\s*" => { }, // skip whitespace
    r";[^\n\r]*[\n\r]*" => { }, // skip ; comments
    _
}


pub Program: Vec<Command> = { (Command)* => <> }



LParen: () = {
    "(" => (),
    "[" => (), 
};
RParen: () = {
    ")" => (),
    "]" => (),
};

List<T>: Vec<T> = { 
    LParen <T*> RParen => <>,
}

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

Command: Command = {
    LParen "set-option" <name:Ident> <value:Expr> RParen => Command::SetOption { name, value },
    LParen "datatype" <name:Ident> <variants:(Variant)*> RParen => Command::Datatype { <> },
    LParen "sort" <name:Ident> LParen <head:Ident> <tail:(Expr)*> RParen RParen => Command::Sort (name, Some((head, tail))),
    LParen "sort" <name:Ident> RParen => Command::Sort (name, None),
    LParen "function" <name:Ident> <schema:Schema> <cost:Cost>
        <unextractable:(":unextractable")?>
        <merge_action:(":on_merge" <List<Action>>)?>
        <merge:(":merge" <Expr>)?> <default:(":default" <Expr>)?> RParen => {
        Command::Function(FunctionDecl { name, schema, merge, merge_action: merge_action.unwrap_or_default(), default, cost, unextractable: unextractable.is_some() })
    },
    LParen "declare" <name:Ident> <sort:Ident> RParen => Command::Declare{name, sort},
    LParen "relation" <name:Ident> <types:List<Type>> RParen => Command::Function(FunctionDecl::relation(name, types)),
    LParen "ruleset" <name:Ident> RParen => Command::AddRuleset(name),
    LParen "rule" <body:List<Fact>> <head:List<Action>> <ruleset:(":ruleset" <Ident>)?> <name:(":name" <String>)?> RParen => Command::Rule{ruleset: ruleset.unwrap_or("".into()), name: name.unwrap_or("".to_string()).into(), rule: Rule { head, body }},
    LParen "rewrite" <lhs:Expr> <rhs:Expr>
        <conditions:(":when" <List<Fact>>)?>
        <ruleset:(":ruleset" <Ident>)?>
    RParen => Command::Rewrite(ruleset.unwrap_or("".into()), Rewrite { lhs, rhs, conditions: conditions.unwrap_or_default() }),
    LParen "birewrite" <lhs:Expr> <rhs:Expr>
        <conditions:(":when" <List<Fact>>)?>
        <ruleset:(":ruleset" <Ident>)?>
    RParen => Command::BiRewrite(ruleset.unwrap_or("".into()), Rewrite { lhs, rhs, conditions: conditions.unwrap_or_default() }),
    LParen "let" <name:Ident> <expr:Expr> RParen => Command::Action(Action::Let(name, expr)),
    <NonLetAction> => Command::Action(<>),
    LParen "run" <limit:UNum>  <until:(":until" <(Fact)*>)?> RParen => Command::RunSchedule(Schedule::Repeat(limit, Box::new(Schedule::Run(RunConfig { ruleset : "".into(), until })))),
    LParen "run" <ruleset: Ident> <limit:UNum> <until:(":until" <(Fact)*>)?> RParen => Command::RunSchedule(Schedule::Repeat(limit, Box::new(Schedule::Run(RunConfig { ruleset, until })))),
    LParen "simplify"  <schedule:Schedule> <expr:Expr> RParen 
        => Command::Simplify { expr, schedule },
    LParen "add-ruleset" <name:Ident> RParen => Command::AddRuleset(name),
    LParen "calc" LParen <idents:IdentSort*> RParen <exprs:Expr+> RParen => Command::Calc(idents, exprs),
    LParen "query-extract" <variants:(":variants" <UNum>)?> <fact:Fact> RParen => Command::Extract { fact, variants: variants.unwrap_or(0) },
    LParen "check" <(Fact)*> RParen => Command::Check(<>),
    LParen "check-proof" RParen => Command::CheckProof,
    LParen "run-schedule" <Schedule*> RParen => Command::RunSchedule(Schedule::Sequence(<>)),
    LParen "push" <UNum?> RParen => Command::Push(<>.unwrap_or(1)),
    LParen "pop" <UNum?> RParen => Command::Pop(<>.unwrap_or(1)),
    LParen "print-table" <sym:Ident> <n:UNum?> RParen => Command::PrintTable(sym, n.unwrap_or(10)),
    LParen "print-size" <sym:Ident> RParen => Command::PrintSize(sym),
    LParen "input" <name:Ident> <file:String> RParen => Command::Input { name, file },
    LParen "output" <file:String> <exprs:Expr+> RParen => Command::Output { file, exprs },
    LParen "fail" <Command> RParen => Command::Fail(Box::new(<>)),
    LParen "include" <file:String> RParen => Command::Include(file),
}

Schedule: Schedule = {
    LParen "saturate" <Schedule*> RParen => Schedule::Saturate(Box::new(Schedule::Sequence(<>))),
    LParen "seq" <Schedule*> RParen => Schedule::Sequence(<>),
    LParen "repeat" <limit:UNum> <scheds:Schedule*> RParen => Schedule::Repeat(limit, Box::new(Schedule::Sequence(scheds))),
    LParen "run" <until:(":until" <(Fact)*>)?> RParen => 
    Schedule::Run(RunConfig { ruleset: "".into(), until }),
    LParen "run" <ruleset: Ident> <until:(":until" <(Fact)*>)?> RParen => Schedule::Run(RunConfig { ruleset, until }),
    <ident:Ident> => Schedule::Run(RunConfig { ruleset: ident, until: None }),
}

Cost: Option<usize> = {
    ":cost" <UNum> => Some(<>),
    => None,
}

NonLetAction: Action = {
    LParen "set" LParen <f: Ident> <args:Expr*> RParen <v:Expr> RParen => Action::Set ( f, args, v ),
    LParen "delete" LParen <f: Ident> <args:Expr*> RParen RParen => Action::Delete ( f, args),
    LParen "union" <e1:Expr> <e2:Expr> RParen => Action::Union(<>),
    LParen "panic" <msg:String> RParen => Action::Panic(msg),
    LParen "extract" <expr:Expr> RParen => Action::Extract(expr, Expr::Lit(Literal::Int(0))),
    LParen "extract" <expr:Expr> <variants:Expr> RParen => Action::Extract(expr, variants),
    <e:CallExpr> => Action::Expr(e),
}

pub Action: Action = {
    LParen "let" <name:Ident> <expr:Expr> RParen => Action::Let(name, expr),
    <NonLetAction> => <>,
}

Name: Symbol = { "[" <Ident> "]" => <> }

pub Fact: Fact = {
    LParen "=" <mut es:Expr+> <e:Expr> RParen => {
        es.push(e);
        Fact::Eq(es)
    },
    <Expr> => Fact::Fact(<>),
}

Schema: Schema = {
    <types:List<Type>> <output:Type> => Schema { input: types, output }
}

pub Expr: Expr = {
    <Literal> => Expr::Lit(<>),
    <Ident> => Expr::Var(<>),
    <CallExpr> => <>,
};

Literal: Literal = {
    // "(" ")" => Literal::Unit, // shouldn't need unit literals for now
    <Num> => Literal::Int(<>),
    <F64> => Literal::F64(<>),
    <SymString> => Literal::String(<>),
}

CallExpr: Expr = {
    LParen <head:Ident> <tail:(Expr)*> RParen => Expr::Call(head, tail),
}

ExprList: Vec<Expr> = { LParen <sexps:(Expr)*> RParen => sexps }

Variant: Variant = {
    LParen <name:Ident> <types:(Type)*> <cost:Cost> RParen => Variant { <> },
}

Type: Symbol = <Ident>;

IdentSort: IdentSort = LParen <ident:Ident> <sort:Type> RParen => IdentSort { ident, sort };
Num: i64 = <s:r"(-)?[0-9]+"> => s.parse().unwrap();
UNum: usize = {
    <Num> => <>.try_into().unwrap(),
}

F64: OrderedFloat<f64> = {
    "NaN" => OrderedFloat::<f64>(f64::NAN),
    <s:r"(-)?[0-9]+\.[0-9]+(e(\+)?(-)?[0-9]+)?"> => OrderedFloat::<f64>(s.parse().unwrap()),
    "inf" => OrderedFloat::<f64>(f64::INFINITY),
    "-inf" => OrderedFloat::<f64>(f64::NEG_INFINITY),
}
Ident: Symbol = <s:r"(([[:alpha:]][\w-]*)|([-+*/?!=<>&|^/%_]))+"> => s.parse().unwrap();
SymString: Symbol = <String> => Symbol::from(<>);

String: String = <r#"("[^"]*")+"#> => {
    let string: &str = <>;
    let first_last_off: &str = &string[1..string.len() - 1];
    first_last_off.replace("\"\"", "\"")
};
