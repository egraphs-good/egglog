(datatype ProofList__)
(datatype Ast__)

;; There are two types of proofs:
;; 1) Provenance proofs justify the existance of a term 
;; 2) Equality proofs prove two terms are equal 
;; Equality proofs `a = b` also double as
;; provenance proofs `a` and `b`
;; When a proof `a = b` is used as a provenance proof, it is a proof of `b`
(datatype Proof__
  ;; proves that a term exists in the database
  (Original__ Ast__)
  ;; proves two terms were set equal in the database
  (OriginalEq__ Ast__ Ast__)
  ;; justifies the fact that a rule fired
  (Rule__ ProofList__ String)
  ;; using a rule justification,
  ;; proves a term exists
  (RuleTerm__ Proof__ Ast__)
  ;; either a primitive appearing as a constant in the rule
  ;; or the computation of a primitive based on already-justified variables
  (ComputePrim__ Ast__)

  ;; using a rule justification, proves two terms are equal
  (RuleEquality__ Proof__ Ast__ Ast__)

  ;; given proofs for x1 = x2, x2 = x3, ..., xn = xn+1
  ;; proves that x1 = xn+1 and x1 and xn+1 exist
  (Transitivity__ ProofList__)
  ;; given x1 = x2, proves x2 = x1
  (Flip__ Proof__)
  ;; given a proof for a term t1, proves that t1 is equal
  ;; to another term t2 via equality proofs on their children
  (Congruence__ Proof__ ProofList__)
  ;; a placeholder for a proof of equality between two
  ;; terms which can be proven equal using the graph
  ;; stored in the `Eq` relation
  (DemandEq__ Ast__ Ast__ :cost 1000000))

;; ProofList definitions
(function Cons__ (Proof__ ProofList__) ProofList__)
(function ProofNull__ () ProofList__)
(let Null__ (ProofNull__))

;; proofs may also act as AST values
;; when the rule-proof keyword is used
(function AstProof__ (Proof__) Ast__)


(function currentAge () i64 :merge (max new old))
(set (currentAge) 0)

(datatype ProofWithAge__
  (MakeProofWithAge__ Proof__ i64))

;; prove two terms equal
(function EqGraph__ (Ast__ Ast__) ProofWithAge__  :cost 1000000 :merge old)

(datatype TrmPrf__
  (MakeTrmPrf__ Ast__ Proof__))

;; get child terms, proofs, and child terms
(function TrmOf__ (TrmPrf__) Ast__ :cost 1000000)
(function PrfOf__ (TrmPrf__) Proof__ :cost 1000000)
(function GetChild__ (Ast__ i64) Ast__ :cost 1000000)

(ruleset proofrules__)

(rule ((= trmprf (MakeTrmPrf__ t p)))
      ((set (TrmOf__ trmprf) t)
       (set (PrfOf__ trmprf) p)) :ruleset proofrules__)



(ruleset proof-extract__)

;; start term, end term, current progress term, proof
(function ProofBetween__ (Ast__ Ast__ Ast__) ProofList__ :cost 1000000 :merge new)
(function PathCost__ (Ast__ Ast__) i64 :merge (min old new))

(function ProofCost__ (Proof__) i64 :merge (min old new))
(function ProofListCost__ (ProofList__) i64 :merge (min old new))

;; propagate demand for proofs
(rule ((= p (Original__ a)))
      ((set (ProofCost__ p) 1))
      :ruleset proof-extract__)
(rule ((= p (OriginalEq__ a b)))
      ((set (ProofCost__ p) 1))
      :ruleset proof-extract__)
(rule ((= p (Rule__ pl s))
       (= cost (ProofListCost__ pl)))
      ((set (ProofCost__ p) cost))
      :ruleset proof-extract__)
(rule ((= p (RuleTerm__ p1 a))
       (= cost (ProofCost__ p1)))
      ((set (ProofCost__ p) cost))
      :ruleset proof-extract__)
(rule ((= p (ComputePrim__ a)))
      ((set (ProofCost__ p) 1))
      :ruleset proof-extract__)
(rule ((= p (RuleEquality__ p1 a b))
       (= cost (ProofCost__ p1)))
      ((set (ProofCost__ p) cost))
      :ruleset proof-extract__)
(rule ((= p (Transitivity__ pl))
       (= cost (ProofListCost__ pl)))
      ((set (ProofCost__ p) cost))
      :ruleset proof-extract__)
(rule ((= p (Flip__ p1))
       (= cost (ProofCost__ p1)))
      ((set (ProofCost__ p) cost))
      :ruleset proof-extract__)
(rule ((= p (Congruence__ p1 pl))
       (= cost (ProofListCost__ pl)))
      ((set (ProofCost__ p) cost))
      :ruleset proof-extract__)
(rule ((= p (DemandEq__ a b)))
      ((set (ProofCost__ p) 1000000))
      :ruleset proof-extract__)
(rule ((= p (Cons__ p1 pl))
       (= cost (ProofCost__ p1))
       (= cost2 (ProofListCost__ pl)))
      ((set (ProofListCost__ p) (+ cost cost2)))
      :ruleset proof-extract__)
(rule ((= p Null__))
      ((set (ProofListCost__ p) 0))
      :ruleset proof-extract__)

;; start proof search for equalities
(rule ((= e (DemandEq__ t1 t2)))
      ((set (ProofBetween__ t1 t2 t1) Null__)
       (set (PathCost__ t1 t1) 0))
      :ruleset proof-extract__)
;; demand for proof cost
(rule ((= proof (ProofBetween__ t1 t2 tmid))
       (= (MakeProofWithAge__ eproof nextage) (EqGraph__ tmid next)))
      ((set (PathCost__ t1 next)
            1000000))
      :ruleset proof-extract__)
;; do one step of proof search to find a path
(rule ((= proof (ProofBetween__ t1 t2 tmid))
       (= (MakeProofWithAge__ eproof nextage) (EqGraph__ tmid next))
       (= stepcost (ProofCost__ eproof))
       (< (+ (PathCost__ t1 tmid) stepcost)
          (PathCost__ t1 next)))
      ((set (ProofBetween__ t1 t2 next)
            (Cons__ eproof proof))
       (set (PathCost__ t1 next)
            (+ (PathCost__ t1 tmid) stepcost)))
      :ruleset proof-extract__)
;; when you find a path, union it with the equality proof
(rule ((= e (DemandEq__ t1 t2))
       (= prooflist (ProofBetween__ t1 t2 t2)))
      ((set (DemandEq__ t1 t2) (Transitivity__ prooflist)))
      :ruleset proof-extract__)


